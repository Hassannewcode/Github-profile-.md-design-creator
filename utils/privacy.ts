/**
 * A client-side safeguard to ensure a sensitive string (like a token) is not accidentally exposed in the generated content.
 * It replaces all occurrences of the sensitive string with a redaction placeholder.
 *
 * @param content The content generated by the AI.
 * @param sensitiveString The string to search for and redact.
 * @returns The sanitized content with the sensitive string replaced if found.
 */
export const sanitizeContent = (content: string, sensitiveString: string): string => {
  // Only proceed if there's a non-empty string to sanitize.
  if (!sensitiveString || !sensitiveString.trim()) {
    return content;
  }

  // Escape any special regex characters in the sensitive string to prevent errors.
  const escapedString = sensitiveString.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
  const regex = new RegExp(escapedString, 'g');
  
  // Test if the string exists before performing a replacement.
  if (regex.test(content)) {
    console.warn('A sensitive string was found in the AI-generated output and has been redacted.');
    return content.replace(regex, '[REDACTED_TOKEN]');
  }
  
  return content;
};
